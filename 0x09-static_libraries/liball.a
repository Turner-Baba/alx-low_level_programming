!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _isupper - checks for uppercase character
 *
 * @c: parameter used
 *
 * Return: (1) if tru (0) if otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}


0-memset.c/     0           0     0     644     340       `
#include "main.h"
/**
 * *_memset - a function that fills memory with a constant byte
 * @s: memory to be filled
 * @b: elements to fill
 * @n: number of times to fill b
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     413       `
#include "main.h"
/**
 * *_strcat - a function that concatenates two strings
 * @dest: first string
 * @src: second string
 * Return: 0
 */
char *_strcat(char *dest, char *src)
{
	int length1, length2, i;

	for (length1 = 0; length1[dest] != '\0'; length1++)
	{

	}
	for (length2 = 0; length2[src] != '\0'; length2++)
	{

	}
	for (i = 0; i <= length2; i++)
	{
		dest[length1 + i] = src[i];
	}

	return (dest);
}


100-atoi.c/     0           0     0     644     567       `
#include "main.h"
/**
 * _atoi - converts a string to integer
 * @s: input string
 * Return: integer
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;

		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}

1-isdigit.c/    0           0     0     644     238       `
#include "main.h"
/**
 * _isdigit - checks for a digit 0 through 9
 *
 * @c: parameter
 *
 * Return: (1) if it is a digit (0) if otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     352       `
#include "main.h"
/**
 * *_memcpy - a function that copies memory area
 * @dest: destination memory to copy to
 * @src: source memory to copy from
 * @n: characters to be copied
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     421       `
#include "main.h"
/**
 * *_strncat - a function that concatenates two strings
 * @dest: destinaatio string
 * @src: source string
 * @n: elements to concatenate
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int length_dest, i;

	for (length_dest = 0; dest[length_dest] != '\0'; length_dest++)
	{

	}
	for (i = 0; src[i] != 0 && i < n; i++)
	{
		dest[length_dest + i] = src[i];
	}

	return (dest);
}

2-strchr.c/     0           0     0     644     393       `
#include "main.h"
/**
 * *_strchr - a function that locates a character in a string
 * @s: string to search from
 * @c: charaacter to be located
 *
 * Return: if c is found,  a pointer to the first occurrence
 * if c is not found - Null
 */
char *_strchr(char *s, char c)
{
	int find;

	for (find = 0; s[find] >= '\0'; find++)
	{
		if (s[find] == c)
			return (s + find);
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     197       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string to return
 * Return: 0
 */
int _strlen(char *s)
{
	int i;

	i = 0;
	while (s[i] != '\0')
	{
	i++;
	}

	return (i);
}

2-strncpy.c/    0           0     0     644     377       `
#include "main.h"
/**
 * *_strncpy - a funtion that copies a string
 * @dest: destination string
 * @src: source string
 * @n: maximumm no of elements to be copied
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}
	for (i = i; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}


3-islower.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: parameter c
 * Return: returns 1 if c is lowercase, returns 0 if otherwise
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
	return (1);
	}
	return (0);
}


3-puts.c/       0           0     0     644     218       `
#include "main.h"
/**
 * _puts - print a string
 * @str: string to be printed
 * Return: string and new line
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     273       `
#include "main.h"
/**
 * _strcmp - a function that compares two strings
 * @s1: first string
 * @s2: second string
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int a = 0;

	for (i = 0; s1[i] != '\0' && a == 0; i++)
	{
		a = s1[i] - s2[i];
	}

	return (a);
}

3-strspn.c/     0           0     0     644     521       `
#include "main.h"
/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: string to be searched
 * @accept: prefix
 *
 * Return: the number of bytes in the initial segment of s
 * which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				bytes++;
				break;
			}
			else if (accept[i + 1] == '\0')
				return (bytes);
		}
		s++;
	}
	return (bytes);
}

4-isalpha.c/    0           0     0     644     251       `
#include "main.h"
/**
 * _isalpha - Entry point of my code
 * @c: - parameter c
 * Return: return 1 if c is a letter or return 0 if otherwise
 */

int _isalpha(int c)
{
if ((c >= 65 && c <= 97) || (c >= 97 && c <= 122))
{
return (1);
}
return (0);
}


4-strpbrk.c/    0           0     0     644     443       `
#include "main.h"
/**
 * *_strpbrk - function that searches a string for any of a set of bytes
 * @s: string to be searched
 * @accept: bytes to search for
 * Return: a pointer to the byte in s that matches one of the bytes in accept
 * if no such byte is found - Null
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     567       `
#include "main.h"
/**
 * *_strstr - a function that locates a substring
 * @haystack: string to be searched
 * @needle: string to be located
 * Return:  a pointer to the beginning of the located substring
 * if the substring is not found - Null
 */
char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
					return (haystack);

				i++;

			} while (haystack[i] == needle[i]);
		}

		haystack++;
	}
	return ('\0');
}


6-abs.c/        0           0     0     644     210       `
#include "main.h"
/**
 * _abs - the absolute value of an integer
 * @c: parameter
 * Return: Absolute value
 */

int _abs(int c)
{
if (c < 0)
{
int abs_val;

abs_val = c * -1;
return (abs_val);
}
return (c);
}
9-strcpy.c/     0           0     0     644     300       `
#include "main.h"
/**
 * *_strcpy - pointer to a char
 * @dest: string points to a char
 * @src: string points to a char
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     239       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *Return: On success 1
 On error,, -1 is returned and error is set appropriately
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

